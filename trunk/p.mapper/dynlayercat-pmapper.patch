Index: pmapper/incphp/extlib/isometadata.php
===================================================================
--- pmapper/incphp/extlib/isometadata.php	(revision 0)
+++ pmapper/incphp/extlib/isometadata.php	(revision 0)
@@ -0,0 +1,151 @@
+<?php
+/**
+ * Class to easily parse and extract information from 
+ * ISO19139 or ISO19110 metadata records.
+ */
+class ISOMetadata {
+    private $_xml;
+    
+    /*
+     * @param $xml_as_string String representation of the XML document to parse.
+     * The metadata record does not need to be the root element. For example a 
+     * CSW response could be used to extract metadata records from.
+     * 
+     * TODO : Support multiple records
+     */
+    function __construct($config) {
+        if (isset($config['url'])) {
+            $this -> _xml = $this ->load_url($config['url']);
+        } else {
+            $this -> _xml = $this->string_as_xml($config['xml']);
+        }
+    }
+    
+    /**
+     * Check a metadata is an ISO19139 or ISO19110 record
+     */
+    public function isIso() {
+        // Check an ISO metadata is available
+        $this -> _xml -> registerXPathNamespace('gfc', 'http://www.isotc211.org/2005/gfc');
+        $this -> _xml -> registerXPathNamespace('gmd', 'http://www.isotc211.org/2005/gmd');
+        $root = $this -> _xml -> xpath('//gmd:MD_Metadata|//gfc:FC_FeatureCatalogue');
+        return !empty($root);
+    }
+    
+    /**
+     * Parse the document as XML and create an array of elements to be extracted.
+     * 
+     * @param $elements Hash of elements to extract. key => value where key 
+     * is the array key to set in the results and value could be an XPath or
+     * a nested array to parse recursively.
+     */
+    public function parse($elements) {
+        $info = array();
+        foreach ($elements as $key => $value) {
+            //error_log($key . "=>" . $value);
+            // Recursively call parse if $value is an array
+            if (is_array($value)) {
+                $info[$key] = $this -> parse($value);
+            } else {
+                $var = ($this -> xpath_query($value));
+                if ($var) {
+                    $info[$key] = $var;
+                } else {
+                    $info[$key] = NULL;
+                }
+            }
+        }
+        return $info;
+    }
+
+    /**
+     * Convert a string to a simple_xml Object.
+     * 
+     * @return A simple xml object with all namespace registered by default.
+     */
+    public function string_as_xml($xml_as_string, $register_ns=true) {
+        $sxml = @simplexml_load_string($xml_as_string);
+        if ($sxml === false) {
+            return;
+        }
+        
+        if ($register_ns) {
+            $this -> register_ns($sxml);
+        }
+        return $sxml;
+    }
+    /**
+     * Load an XML file from URL and create a simple XML object.
+     * 
+     * @return A simple xml object with all namespace registered by default.
+     */
+    public function load_url($url, $register_ns=true) {
+        $sxml = new SimpleXMLElement($url, NULL, true);
+        if ($sxml === false) {
+            return;
+        }
+        if ($register_ns) {
+            $this -> register_ns($sxml);
+        }
+        return $sxml;
+    }
+    
+    /**
+     * Register all XML document namespace.
+     */
+    public function register_ns($sxml) {
+        //Registers all namespaces used (required to make XPath queries with the simplexml library)
+        $namespaces = $sxml -> getNamespaces(true);
+        foreach ($namespaces as $prefix => $ns) {
+            $sxml -> registerXPathNamespace($prefix, $ns);
+        }
+    }
+    /**
+     * Populate an array with column and codelist informatino from 
+     * an ISO19110 records.
+     */
+    public function parse_featureCatalogue() {
+        $feature_cat_specs = array();
+        $attributes = $this -> _xml -> xpath('//gfc:FC_FeatureAttribute');
+        foreach ($attributes as $att) {
+            $att_code = $this -> xpath_query('gfc:memberName/gco:LocalName', $att);
+            $att_def = $this -> xpath_query('gfc:definition/gco:CharacterString', $att);
+            $values = $att -> xpath('gfc:listedValue/gfc:FC_ListedValue');
+            $lv = array();
+            foreach ($values as $value) {
+                $value_code = $this -> xpath_query('gfc:code/gco:CharacterString', $value);
+                $value_label = $this -> xpath_query('gfc:label/gco:CharacterString', $value);
+                $value_def = $this -> xpath_query('gfc:definition/gco:CharacterString', $value);
+                $lv[$value_code] = array('label' => $value_label, 'def' => $value_def);
+            }
+            $a = array('code' => $att_code, 'def' => $att_def, 'values' => $lv);
+            $feature_cat_specs[$att_code] = $a;
+        }
+        error_log(print_r($feature_cat_specs, true));
+        return $feature_cat_specs;
+    }
+
+    //XPath query function
+    private function xpath_query($xpath_expr, $context=NULL) {
+        /* $sxml: SimpleXML object
+         $uuid_req: UUID received in the GET request
+         $xpath_expr: XPath expression to run against the SimpleXML object
+         */
+        if ($context !== NULL) {
+            $result = $context -> xpath($xpath_expr);
+        } else {
+            $result = $this -> _xml -> xpath($xpath_expr);
+        
+        }
+        if (empty($result) || strlen($result[0]) == 0) {
+            error_log("XPath query error: " . $xpath_expr);
+            return false;
+        } else {
+            settype($result[0], 'string');
+            return $result[0];
+        }
+    }
+    
+    
+}
+?>
\ No newline at end of file
Index: pmapper/incphp/extlib/csw.php
===================================================================
--- pmapper/incphp/extlib/csw.php	(revision 0)
+++ pmapper/incphp/extlib/csw.php	(revision 0)
@@ -0,0 +1,154 @@
+<?php
+/*****************************************************************************************
+ *
+ * PHP CSW client connector (requires a CSW catalogue providing metadata in ISO19115/19139
+ * and ISO19110).
+ *
+ * Support GeoNetwork authentification mechanism
+ *
+ * Authors :
+ *  * Pierre Lagarde
+ *  * FranÃ§ois Prunayre
+ *
+ *****************************************************************************************/
+require_once "HTTP/Request.php";
+
+/**
+ * A CSW client.
+ *
+ * Configuration:
+ *  * csw_url: URL of the CSW entry point.
+ *
+ */
+class CSWCatalogue {
+    private $_cswAddress;
+    private $_authentAddress;
+    private $_cswLogin;
+    private $_cswPassword;
+    private $_bAuthent;
+    private $_sessionID;
+
+    private $_response;
+
+    /**
+     *
+     * @param String $cswAddress address of the CSW URL
+     * @param String $cswLogin login of the user to CSW-T
+     * @param String $cswPassword  password of the user to CSW-T
+     * @param String $authentAddress address of the login/logout address
+     */
+    function __construct($cswAddress, $cswLogin = null, $cswPassword = null, $authentAddress = null) {
+        if (isset($_REQUEST['csw_url'])) {
+            $this -> _cswAddress = $_REQUEST['csw_url'];
+        } elseif (isset($cswAddress)) {
+            $this -> _cswAddress = $cswAddress;
+        } else {
+            error_log($_SERVER['REQUEST_URI'] . " Empty or missing CSW URL set by _REQUEST or parameter");
+            die();
+        }
+        //error_log("CSW URL: " . $this->_cswAddress);
+        $this -> _bAuthent = false;
+        if (isset($cswLogin)) {
+            $this -> _cswLogin = $cswLogin;
+            $this -> _cswPassword = $cswPassword;
+            $this -> _authentAddress = $authentAddress;
+            $this -> _bAuthent = true;
+        }
+    }
+
+    /**
+     *
+     * @return bool Request success / error
+     */
+    private function _callHTTPCSW($request) {
+
+        
+        try {
+            $request -> sendRequest();
+            if (200 == $request -> getResponseCode()) {
+                $this -> _response = $request -> getResponseBody();
+                /* TODO : Add cookie for auth support
+                 * $cookies = $request -> getCookies();
+                foreach ($cookies as $cook) {
+                    if ($cook['name'] == 'JSESSIONID')
+                        $this -> _sessionID = $cook['value'];
+                }*/
+                return true;
+            } else {
+                $this -> _response = $request -> getResponseCode() . ' ' . $request -> getResponseBody();
+                error_log($_SERVER['REQUEST_URI'] . " Error while retrieving the metadata from the CSW server: " + $this -> _response);
+                return false;
+            }
+        } catch (HTTP_Request_Exception $e) {
+            $this -> _response = 'Error: ' . $e -> getMessage();
+            error_log($_SERVER['REQUEST_URI'] . " Error while retrieving the metadata from the CSW server: " + $this -> _response);
+            return false;
+        }
+    }
+
+    /**
+     *
+     * @return bool authentication success or error
+     */
+    private function _authentication($request) {
+        //only available for Geonetwork based authentification
+        //start by logout
+        if ($this -> _bAuthent) {
+            $req = new HTTP_Request($this -> _authentAddress . '/xml.user.logout', HTTP_Request::METHOD_POST);
+
+            if ($this -> _callHTTPCSW($req)) {
+                //success so next step
+                //start to login
+                $req = new HTTP_Request($this -> _authentAddress . '/xml.user.login');
+                $req -> setMethod(HTTP_Request::METHOD_POST) -> setHeader("'Content-type': 'application/x-www-form-urlencoded', 'Accept': 'text/plain'") -> addPostParameter('username', $this -> _cswLogin) -> addPostParameter('password', $this -> _cswPassword);
+                if ($this -> _callHTTPCSW($req)) {
+                    $request -> addCookie('JSESSIONID', $this -> _sessionID);
+                    return true;
+                }
+            }
+            return false;
+        }
+        return true;
+    }
+
+    /**
+     * retrieve a specific metadata with UUID in GeoNetwork / Geosource
+     * @param String $id of the metadata
+     * @return XML content (could be an empty response)
+     */
+    public function getRecordById($id) {
+        $getRecodByIDRequest = new HTTP_Request($this -> _cswAddress);
+        $getRecodByIDRequest -> addHeader("Content-Type", "text/xml");
+        $getRecodByIDRequest -> setMethod(HTTP_REQUEST_METHOD_POST);
+        $request = $this -> buildGetRecordById($id);
+        $getRecodByIDRequest -> addRawPostData($request, true);
+        
+        //authentication if needed
+        if (!$this -> _authentication($getRecodByIDRequest))
+            throw new Exception($this -> _response, "001");
+        if ($this -> _callHTTPCSW($getRecodByIDRequest)) {
+            $getRecodByIDRequest = null;
+            return $this -> _response;
+        } else {
+            $getRecodByIDRequest = null;
+            throw new Exception($this -> _response, "002");
+        }
+    }
+
+    public function getUrl() {
+        return $this -> _cswAddress;
+    }
+    
+    /**
+     * Build a get record by id request using Filter Encoding
+     */
+    private function buildGetRecordById($uuid, $outputSchema='http://www.isotc211.org/2005/gmd', $elementSetName='full') {
+        return '<?xml version="1.0"?>
+        <csw:GetRecordById xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2"
+          outputSchema="' . $outputSchema . '">
+            <csw:Id>' . $uuid . '</csw:Id>
+            <csw:ElementSetName>' . $elementSetName . '</csw:ElementSetName>
+        </csw:GetRecordById>';
+    }
+}
+?>

Property changes on: pmapper/incphp/extlib/csw.php
___________________________________________________________________
Added: svn:executable
   + *

Index: pmapper/incphp/query/query.php
===================================================================
--- pmapper/incphp/query/query.php	(revision 1244)
+++ pmapper/incphp/query/query.php	(working copy)
@@ -618,16 +618,35 @@
         // TABLE HEADER: ATTRIBUTE NAMES...
         $h = "\"header\": [\"$slink\"";
         $sh = "\"stdheader\": [\"$slink\"";
+        $dh = "\"defheader\": {\"$slink\":\"$slink\"";
         
+        // Check if FEATURE_CATALOGUE_URL metadata is set for the layer
+        // to retrieve extra data model information
+        $featureCatalogue = $this -> retrieveFeatureCatalogue($this->qLayer);
+        
         for ($iField=0; $iField < sizeof($selHeaders); $iField++) {
-            $h .= ",\"" . $selHeaders[$iField] . "\"";
+            $colName = $selHeaders[$iField];
+            $h .= ",\"" . $colName . "\"";
             $sh .= ",\"" . $selStdHeaders[$iField] . "\"";
+            if ($featureCatalogue) {
+                $values = $featureCatalogue[$colName]['values'];
+                $lv = "{";
+                if ($values) {
+                    foreach ($values as $key => $value) {
+                        $lv .= "\"" . $key . "\": {\"label\":\"" . $value['label'] . "\", \"def\":\"". $value['def'] ."\"},";
+                    }
+                    $lv .= "\"null\":\"\"";
+                }
+                $lv .= "}";
+                $dh .= ",\"" . $colName . "\":{\"desc\":\"" . $featureCatalogue[$colName]['def'] . "\", \"values\": " . $lv . "}";
+            }
         }
         
         $h .= "]";
+        $dh .= "}";
         $sh .= "]";
         
-        return "$h, $sh, \"values\": [ ";
+        return "$h, $sh, " . ($featureCatalogue ? $dh . "," : "") . "\"values\": [ ";
     }
     
     
@@ -639,12 +658,12 @@
     {
         // Change format for decimal field values
         /*
+        */
         if (is_numeric($fldValue)) {
             if (preg_match('/\./', $fldValue)) {
-                $fldValue = number_format($fldValue, 2, ',', '');
+                $fldValue = number_format($fldValue, 2, '.', '');
             }
         } 
-        */
         
         // !!!! ENCODE ALL STRINGS IN UTF-8 !!!!
         if ($this->layerEncoding) {
@@ -708,8 +727,29 @@
         }
     }
 
+    /**
+     * Check if a feature catalogue URL is available for the layer and retrieve
+     * this feature catalogue. Store information in session for the layer in order
+     * to retrieve feature catalogue only on first query.
+     */
+    function retrieveFeatureCatalogue($layer) {
+        $url = $layer -> getMetaData('FEATURE_CATALOGUE_URL');
+        if ($url) {
+            $id = hash('md5', $url);
+            $featureCatalogueSpecs = $_SESSION['catalogueDataSpecs'][$id];
+            if (!empty($featureCatalogueSpecs)) {
+                return $featureCatalogueSpecs;
+            } else {
+                require_once (str_replace('\\', '/', realpath(dirname(__FILE__) . "/../extlib/isometadata.php")));
+                
+                $im = new ISOMetadata(array('url'=>$url));
+                $specs = $im->parse_featureCatalogue();
+                $_SESSION['catalogueDataSpecs'][$id] = $specs;
+                return $specs;
+            }
+        }
+    }
 
-
     /**
      * SEARCH VIA ATTRIBUTES
      */
Index: pmapper/plugins/dynlayercat/layerdefinition/urban.msl
===================================================================
--- pmapper/plugins/dynlayercat/layerdefinition/urban.msl	(revision 0)
+++ pmapper/plugins/dynlayercat/layerdefinition/urban.msl	(revision 0)
@@ -0,0 +1,16 @@
+LAYER
+  TYPE polygon
+  TEMPLATE "void"
+  TOLERANCE 2
+  TOLERANCEUNITS pixels
+  METADATA
+     "LAYER_ENCODING" "UTF-8"
+  END
+  CLASS
+    NAME "Default"
+    STYLE
+      COLOR 220 0 0 
+      OUTLINECOLOR 150 150 150
+    END
+  END  
+END   
\ No newline at end of file

Property changes on: pmapper/plugins/dynlayercat/layerdefinition/urban.msl
___________________________________________________________________
Added: svn:executable
   + *

Index: pmapper/plugins/dynlayercat/layerdefinition/samples/sample.shp.msl
===================================================================
--- pmapper/plugins/dynlayercat/layerdefinition/samples/sample.shp.msl	(revision 0)
+++ pmapper/plugins/dynlayercat/layerdefinition/samples/sample.shp.msl	(revision 0)
@@ -0,0 +1,21 @@
+LAYER
+  TYPE polygon
+  TEMPLATE "void"
+  METADATA
+     "LAYER_ENCODING" "UTF-8"
+  END
+  CLASS
+    EXPRESSION ([NV] = 1) 
+    STYLE
+      COLOR 50 50 200 
+      OUTLINECOLOR 0 0 0
+    END
+  END
+  CLASS
+    EXPRESSION ([NV] = 0) 
+    STYLE
+      COLOR 225 225 245
+      OUTLINECOLOR 0 0 0
+    END
+  END  
+END   
\ No newline at end of file

Property changes on: pmapper/plugins/dynlayercat/layerdefinition/samples/sample.shp.msl
___________________________________________________________________
Added: svn:executable
   + *

Index: pmapper/plugins/dynlayercat/layerdefinition/samples/corine_raster100.tif.msl
===================================================================
--- pmapper/plugins/dynlayercat/layerdefinition/samples/corine_raster100.tif.msl	(revision 0)
+++ pmapper/plugins/dynlayercat/layerdefinition/samples/corine_raster100.tif.msl	(revision 0)
@@ -0,0 +1,188 @@
+LAYER
+  TYPE Raster
+  TEMPLATE "void"
+  TOLERANCE 0
+  TOLERANCEUNITS pixels 
+  METADATA
+    "RESULT_FIELDS" "x,y,class,value_0"
+    "RESULT_HEADERS" "X,Y,CLASS,VALUE" 
+  END
+
+  CLASS
+    EXPRESSION ([pixel] <= 11)
+    NAME 'Urban and industrial fabric'
+    COLOR 230 0 30
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 12)
+    NAME 'Non-irrigated arable land'
+    COLOR 255 255 166
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 13)
+    NAME 'Permanently irrigated land'
+    COLOR 255 255 0
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 14)
+    NAME 'Rice fields'
+    COLOR 230 230 0
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 15)
+    NAME 'Vineyards'
+    COLOR 230 128 0
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 16)
+    NAME 'Fruit trees and berry plantations'
+    COLOR 242 166 77
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 17)
+    NAME 'Olive groves'
+    COLOR 230 166 0
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 18)
+    NAME 'Pastures'
+    COLOR 230 230 77
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 19)
+    NAME 'Annual crops associated with permanent crops'
+    COLOR 255 230 166
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 20)
+    NAME 'Complex cultivation patterns'
+    COLOR 255 230 77
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 21)
+    NAME 'Agriculture, with natural vegetation'
+    COLOR 230 204 77
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 22)
+    NAME 'Agro-forestry areas'
+    COLOR 242 204 166
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 23)
+    NAME 'Broad-leaved forest'
+    COLOR 128 255 0
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 24)
+    NAME 'Coniferous forest'
+    COLOR 0 166 0
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 25)
+    NAME 'Mixed forest'
+    COLOR 77 255 0
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 26)
+    NAME 'Natural grassland'
+    COLOR 204 242 77
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 27)
+    NAME 'Moors and heathland'
+    COLOR 166 255 128
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 28)
+    NAME 'Sclerophyllous vegetation'
+    COLOR 166 230 77
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 29)
+    NAME 'Transitional woodland-shrub'
+    COLOR 166 242 0
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 30)
+    NAME 'Beaches, dunes, and sand plains'
+    COLOR 230 230 230
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 31)
+    NAME 'Bare rock'
+    COLOR 204 204 204
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 32)
+    NAME 'Sparsely vegetated areas'
+    COLOR 204 255 204
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 33)
+    NAME 'Burnt areas'
+    COLOR 0 0 0
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 34)
+    NAME 'Glaciers and perpetual snow'
+    COLOR 166 230 204
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 35)
+    NAME 'Inland marshes'
+    COLOR 166 166 255
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 36)
+    NAME 'Peatbogs'
+    COLOR 160 120 230 #77 77 255
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 37)
+    NAME 'Salt-marshes'
+    COLOR 204 204 255
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 38)
+    NAME 'Salines'
+    COLOR 230 230 255
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 39)
+    NAME 'Intertidal flats'
+    COLOR 166 166 230
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 40 or [pixel] = 41)
+    NAME 'Water bodies'
+    COLOR 0 204 242
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 42)
+    NAME 'Coastal lagoons'
+    COLOR 0 255 166
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 43)
+    NAME 'Estuaries'
+    COLOR 166 255 230
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 44)
+    NAME 'Sea and ocean'
+    COLOR 230 242 255
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 49)
+    NAME 'No Data'
+    COLOR 220 220 220
+  END # Class
+  CLASS
+    EXPRESSION ([pixel] = 50)
+    NAME 'Sea and ocean'
+    COLOR 80 140 210 #60 120 200
+  END # Class
+ 
+
+END
\ No newline at end of file

Property changes on: pmapper/plugins/dynlayercat/layerdefinition/samples/corine_raster100.tif.msl
___________________________________________________________________
Added: svn:executable
   + *

Index: pmapper/plugins/dynlayercat/layerdefinition/raster.lyr
===================================================================
--- pmapper/plugins/dynlayercat/layerdefinition/raster.lyr	(revision 0)
+++ pmapper/plugins/dynlayercat/layerdefinition/raster.lyr	(revision 0)
@@ -0,0 +1,11 @@
+LAYER
+  TYPE Raster
+  TEMPLATE "void"
+  TOLERANCE 0
+  TOLERANCEUNITS pixels 
+  METADATA
+    "RESULT_FIELDS" "x,y,class,value_0"
+    "RESULT_HEADERS" "X,Y,CLASS,VALUE" 
+  END
+END
+

Property changes on: pmapper/plugins/dynlayercat/layerdefinition/raster.lyr
___________________________________________________________________
Added: svn:executable
   + *

Index: pmapper/plugins/dynlayercat/layerdefinition/polygon.lyr
===================================================================
--- pmapper/plugins/dynlayercat/layerdefinition/polygon.lyr	(revision 0)
+++ pmapper/plugins/dynlayercat/layerdefinition/polygon.lyr	(revision 0)
@@ -0,0 +1,16 @@
+LAYER
+  TYPE polygon
+  TEMPLATE "void"
+  TOLERANCE 2
+  TOLERANCEUNITS pixels
+  METADATA
+     "LAYER_ENCODING" "UTF-8"
+  END
+  CLASS
+    NAME "Default"
+    STYLE
+      COLOR 220 220 220
+      OUTLINECOLOR 0 0 0
+    END
+  END  
+END   
\ No newline at end of file

Property changes on: pmapper/plugins/dynlayercat/layerdefinition/polygon.lyr
___________________________________________________________________
Added: svn:executable
   + *

Index: pmapper/plugins/dynlayercat/layerdefinition/line.lyr
===================================================================
--- pmapper/plugins/dynlayercat/layerdefinition/line.lyr	(revision 0)
+++ pmapper/plugins/dynlayercat/layerdefinition/line.lyr	(revision 0)
@@ -0,0 +1,15 @@
+LAYER
+  TYPE line
+  TEMPLATE "void"
+  TOLERANCE 3
+  TOLERANCEUNITS pixels
+  METADATA
+     "LAYER_ENCODING" "UTF-8"
+  END
+  CLASS
+    STYLE
+      COLOR 220 220 220
+      OUTLINECOLOR 0 0 0
+    END
+  END  
+END   
\ No newline at end of file

Property changes on: pmapper/plugins/dynlayercat/layerdefinition/line.lyr
___________________________________________________________________
Added: svn:executable
   + *

Index: pmapper/plugins/dynlayercat/layerdefinition/point.lyr
===================================================================
--- pmapper/plugins/dynlayercat/layerdefinition/point.lyr	(revision 0)
+++ pmapper/plugins/dynlayercat/layerdefinition/point.lyr	(revision 0)
@@ -0,0 +1,15 @@
+LAYER
+  TYPE point
+  TEMPLATE "void"
+  TOLERANCE 4
+  TOLERANCEUNITS pixels
+  METADATA
+     "LAYER_ENCODING" "UTF-8"
+  END
+  CLASS
+    STYLE
+      COLOR 220 220 220
+      OUTLINECOLOR 0 0 0
+    END
+  END  
+END   
\ No newline at end of file

Property changes on: pmapper/plugins/dynlayercat/layerdefinition/point.lyr
___________________________________________________________________
Added: svn:executable
   + *

Index: pmapper/plugins/dynlayercat/dynlayercat.php
===================================================================
--- pmapper/plugins/dynlayercat/dynlayercat.php	(revision 0)
+++ pmapper/plugins/dynlayercat/dynlayercat.php	(revision 0)
@@ -0,0 +1,469 @@
+<?php
+/******************************************************************************
+ *
+ * Purpose: initialization and creation of dynamic layers based on 
+ * a layer description contained in a metadata record extracted from a CSW catalogue.
+ * 
+ * The metadata record must contains :
+ *  * layer title
+ *  * layer location : Supported formats are location to a vector or raster file,
+ * PostGIS DB connection information.
+ *  * layer extent
+ *  * layer projection system
+ * 
+ * Optionnaly the metadata record could be linked to a feature catalogue further 
+ * describing the column definition and list of values. In that case, the ISO19110
+ * feature catalogue is registered in the FEATURE_CATALOGUE_URL properties 
+ * (later used by the Query module to extract and display columns and codelist
+ * information).
+ * 
+ * Author:
+ *  * Armin Burger
+ *  * Francois Prunayre
+ *
+ ******************************************************************************
+ *
+ * Copyright (c) 2003-2009 Armin Burger
+ *
+ * This file is part of p.mapper.
+ *
+ * p.mapper is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version. See the COPYING file.
+ *
+ * p.mapper is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with p.mapper; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ ******************************************************************************/
+
+require_once (str_replace('\\', '/', realpath(dirname(__FILE__) . "/../../incphp/map/dynlayer.php")));
+require_once (str_replace('\\', '/', realpath(dirname(__FILE__) . "/../../incphp/extlib/csw.php")));
+require_once (str_replace('\\', '/', realpath(dirname(__FILE__) . "/../../incphp/extlib/isometadata.php")));
+
+class DynLayerCat extends DynLayer {
+    public $map;
+
+    private $data_path_prefix = "";
+    // List of protocols - default to GeoNetwork values
+    private $protocols = array('FILE:GEO', 'FILE:RASTER', 'DB:POSTGIS');
+    private $proj_authority = array('EPSG');
+    
+    public function __construct($map) {
+        require_once "dynlayercat_config.php";
+        $this -> connections = $connections;
+        $this -> layerSrcType = "CAT";
+        $this -> map = $map;
+        if (isset($_REQUEST['uuid'])) {
+            $this -> uuid = $_REQUEST['uuid'];
+        }
+        $this -> dataSpecs = isset($_SESSION['catalogueDataSpecs']) ? $_SESSION['catalogueDataSpecs'] : false;
+        $this -> config = $_SESSION['pluginsConfig']['dynlayercat'];
+        
+        if (isset($_REQUEST['csw_url'])) {
+            $this -> config['csw_url'] = $_REQUEST['csw_url'];
+        } elseif (!isset($this -> config['csw_url'])) {
+            error_log($_SERVER['REQUEST_URI'] . " Empty or missing csw_url as input parameter to the script");
+            die();
+        }
+        
+        if (isset($this -> config['data_path_prefix'])) {
+            $this -> data_path_prefix = $this -> config['data_path_prefix'];
+        }
+        
+        // Overrides the default protocol list
+        if (isset($this -> config['protocols'])) {
+            $this -> protocols = explode(',', $this -> config['protocols']);
+        }
+        
+        // Overrides the default protocol list
+        if (isset($this -> config['proj_authority'])) {
+            $this -> proj_authority = explode(',', $this -> config['proj_authority']);
+        }
+    }
+
+    /**
+     * Add prefix and suffix to an array value
+     */
+    private function decorate(&$value, $key, $config = array('prefix' => '', 'suffix' => '')) {
+        $value = $config['prefix'] . $value . $config['suffix'];
+    }
+
+    protected function getLayerList() {
+        $layerList = array();
+        
+        // Avoid duplicate
+        $uuidList =  array_unique(explode(",", $this -> uuid));
+        foreach ($uuidList as $uuid) {
+            $catalogue = new CSWCatalogue($this -> config['csw_url']);
+            $response = $catalogue -> getRecordById($uuid);
+            
+            // Add prefix and suffix to protocols and proj authority to build XPath
+            $list_of_protocols = $this -> protocols;
+            array_walk($list_of_protocols, array($this, 'decorate'), array('prefix' => 'gco:CharacterString="', 'suffix' => '"'));
+            //error_log(print_r($list_of_protocols, true));
+            $list_of_projauthority = $this -> proj_authority;
+            array_walk($list_of_projauthority, array($this, 'decorate'), array('prefix' => 'contains(translate(gco:CharacterString,"abcedfeghijklmnopqrstuvwxyz","ABCEDFGHIJKLMNOPQRSTUVWXYZ"),"', 'suffix' => '")'));
+            
+            // List of elements to extract from the record
+            $elements = array(
+                'uuid' => '//gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString',
+                'title' => '//gmd:identificationInfo[1]/*/gmd:citation/*/gmd:title/gco:CharacterString',
+                'dataset_id' => '//gmd:identificationInfo[1]/*/gmd:citation/*/gmd:identifier/*/gmd:code/gco:CharacterString',
+                // Protocol set in plugin config
+                'path' => '//gmd:distributionInfo/*/gmd:transferOptions/*/gmd:onLine/*/gmd:protocol[' . implode(' or ', $list_of_protocols) . ']/../gmd:linkage/gmd:URL',
+                'bbox' => array(
+                    'westLon' => '//gmd:identificationInfo[1]/*/gmd:extent/*/gmd:geographicElement/*/gmd:westBoundLongitude/gco:Decimal',
+                    'eastLon' => '//gmd:identificationInfo[1]/*/gmd:extent/*/gmd:geographicElement/*/gmd:eastBoundLongitude/gco:Decimal',
+                    'northLat' => '//gmd:identificationInfo[1]/*/gmd:extent/*/gmd:geographicElement/*/gmd:northBoundLatitude/gco:Decimal',
+                    'southLat' => '//gmd:identificationInfo[1]/*/gmd:extent/*/gmd:geographicElement/*/gmd:southBoundLatitude/gco:Decimal'
+                    ),
+                'epsg' => '//gmd:referenceSystemInfo/*/gmd:referenceSystemIdentifier/*/gmd:code[' . implode(' or ', $list_of_projauthority) . ']/gco:CharacterString',
+                'spatial_type' => '//gmd:identificationInfo[1]/*/gmd:spatialRepresentationType/*/@codeListValue',
+                'feature_catalogue' => '//gmd:contentInfo/*/gmd:featureCatalogueCitation/@uuidref'
+            );
+            $im = new ISOMetadata(array('xml'=>$response));
+            // Do not add the current requested metadata if it's not an ISO record
+            if (!$im -> isIso()) {
+                error_log("Do not add the current requested metadata if it's not an ISO record. UUID: $uuid");
+                continue;
+            }
+            $dataSpecs = $im->parse($elements);
+            
+            // Extract EPSG code and use default if not found
+            // urn:ogc:def:crs:EPSG:7.1:4326
+            // urn:ogc:def:crs:EEA:1.0:777100
+            preg_match("/urn:ogc:def:crs:(EPSG|EEA):.*:([0-9]*)/", $dataSpecs['epsg'], $matches);
+            
+            $dataSpecs['epsg'] = strtolower($matches[1]) . ":" . $matches[2];
+            $dataSpecs['srscode'] = $matches[2];
+            if (empty($dataSpecs['epsg'])) {
+                $dataSpecs['epsg'] = $this->config['default_proj'];
+            }
+            if (empty($dataSpecs)) {
+                error_log("Unable to retrieve data specification from metadata catalogue for layer with UUID: $uuid.");
+                continue;
+            }
+            
+            
+            // Add a GetRecordById URL to retrieve the feature catalogue
+            if ($dataSpecs['feature_catalogue']) {
+                $dataSpecs['feature_catalogue_url'] = $catalogue -> getUrl() . "?SERVICE=CSW&VERSION=2.0.2&REQUEST=GetRecordById&outputSchema=http://www.isotc211.org/2005/gmd&elementSetName=full&ID=" . $dataSpecs['feature_catalogue'];
+            }
+            
+            $layerData = $dataSpecs['path'];
+            $layerName = $dataSpecs['uuid'];
+            $layerSpatialType = $dataSpecs['spatial_type'];
+            $le = $this -> getMapExtent($dataSpecs);
+            $dataSpecs['mapext'] = $le;
+            $this -> map -> setExtent($le['minx'], $le['miny'], $le['maxx'], $le['maxy']);
+
+            $connParams = $this -> getLayerConnectionParams($layerData);
+            $dataSpecs['connParams'] = $connParams;
+
+            $this -> dataSpecs["$uuid"] = $dataSpecs;
+
+            $layerString = $this -> getLayerDefinition($connParams, $layerSpatialType);
+            //$_SESSION['catalogueDataSpecs'] = $dataSpecs;
+            if ($layerString != null) {
+                $layerList[$layerName] = array("layerDefinition" => $layerString);
+            }
+        }
+        // Store in session for current object use or for later use
+        // from globals.php
+        $_SESSION['catalogueDataSpecs'] = $this -> dataSpecs;
+        return $layerList;
+    }
+
+    protected function postprocessDynLayers() {
+        $_SESSION['defGroups'] = array_merge($_SESSION['defGroups'], $this -> layerNames);
+    }
+
+    /**
+     * Create dynamic layers based on its definition from the metadata record
+     */
+    protected function createDynLayer($layerName, $layerString) {
+        //error_log("createDynLayer: " . $layerName . "-" . $layerString);
+        $newLayer = ms_newLayerObj($this -> map);
+        $newLayer -> updateFromString($layerString);
+        
+        $dataSpecs = $_SESSION['catalogueDataSpecs'][$layerName];
+        
+        $connectionType = $dataSpecs['connParams']['type'];
+
+        if ($connectionType == "generic") {
+            $newLayer -> set("data", $this -> data_path_prefix . $dataSpecs['path']);
+        } else {
+            $connTypeList['POSTGIS'] = MS_POSTGIS;
+            $connTypeList['OGR'] = MS_OGR;
+            $connTypeList['WMS'] = MS_WMS;
+            $connTypeList['ORACLESPATIAL'] = MS_ORACLESPATIAL;
+
+            $newLayer -> setConnectiontype($connTypeList[$connectionType]);
+            $newLayer -> set("connection", $dataSpecs['connParams']['connection']);
+
+            if ($connectionType == "POSTGIS") {
+                $geom = $dataSpecs['connParams']['geom'];
+                $table = $dataSpecs['connParams']['schema'] . "." . $dataSpecs['connParams']['layer'];
+                $uniqueFid = $dataSpecs['connParams']['uniqueFid'];
+                $epsg = $dataSpecs['srscode'];
+                $newLayer -> set("data", "$geom FROM $table USING UNIQUE $uniqueFid USING SRID=$epsg");
+            } else {
+                $newLayer -> set("data", $dataSpecs['path']);
+            }
+        }
+
+        $newLayer -> set("name", $dataSpecs['uuid']);
+        $newLayer -> setMetaData("DESCRIPTION", $dataSpecs['title']);
+        $newLayer -> setMetaData("UUID", $dataSpecs['uuid']);
+        if (isset($dataSpecs['feature_catalogue_url'])) {
+            $newLayer -> setMetaData("FEATURE_CATALOGUE_URL", $dataSpecs['feature_catalogue_url']);
+        }
+        $newLayer -> setMetaData("CATEGORY", $this -> config['layer_category']);
+
+        // Move layer to configured index
+        $newLayerCurrentIdx = $newLayer -> index;
+        $newLayerTargetIdx = $this -> config['layeridx'];
+        $newDrawingOrder = $this -> getNewDrawingOrder($this -> map -> getLayersDrawingOrder(), $newLayerCurrentIdx, $newLayerTargetIdx);
+        $this -> map -> setLayersDrawingOrder($newDrawingOrder);
+
+        // Set projections and extent
+        $projStr = "init=" . $dataSpecs['epsg'];
+        $newLayer -> setProjection($projStr);
+        $this -> map -> setProjection($projStr, 1);
+
+        $le = $dataSpecs['mapext'];
+        $this -> map -> setExtent($le['minx'], $le['miny'], $le['maxx'], $le['maxy']);
+        
+        if (!empty($this -> config['mapfile_dir'])) {
+            $this -> map -> save($this -> config['mapfile_dir'] . $layerName . '.map');
+        }
+    }
+
+    
+
+    protected function getNewDrawingOrder($a, $ci, $ti) {
+        $alen = count($a);
+        $na = array();
+        for ($i = 0; $i < $alen; $i++) {
+            if ($i < $ti) {
+                $na[] = $i;
+            } elseif ($i == $ti) {
+                $na[] = $ci;
+            } elseif ($i > $ti) {
+                $na[] = $i - 1;
+            }
+        }
+        return $na;
+    }
+
+    protected function getLayerConnectionParams($layerFilename) {
+        $connParams = array();
+
+        if (strpos($layerFilename, ":")) {
+            $ogrDBConn = true;
+            $connList = explode("/", $layerFilename);
+            $conn = $this -> connections[$connList[0]];
+            $layerList = explode(".", $connList[1]);
+            $schema = $layerList[0];
+            $layerName = $layerList[1];
+            $uniqueFid = $this -> getLayerUniqueFid($schema, $layerName, $conn['connection']);
+            $geomFld = $this -> getGeomFld($schema, $layerName, $conn['connection']);
+
+            $connParams['connection'] = $conn['connection'];
+            $connParams['schema'] = $schema;
+            $connParams['type'] = $conn['type'];
+            $connParams['layer'] = $layerName;
+            $connParams['geom'] = $geomFld;
+            $connParams['uniqueFid'] = $uniqueFid;
+        } else {
+            $ogrConnectionStr = $layerFilename;
+            $connParams['type'] = "generic";
+            $connParams['layer'] = $layerFilename;
+        }
+        return $connParams;
+    }
+
+    protected function getLayerUniqueFid($schema, $layerName, $dsn) {
+        $sql = " SELECT
+                    pg_attribute.attname as unique_id,
+                    format_type(pg_attribute.atttypid, pg_attribute.atttypmod) 
+                 FROM 
+                    pg_index, pg_class, pg_attribute 
+                 WHERE
+                    pg_class.oid = (SELECT oid FROM pg_class WHERE relname = '$layerName') AND
+                    pg_class.relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = '$schema') AND
+                        indrelid = pg_class.oid AND
+                        pg_attribute.attrelid = pg_class.oid AND
+                        pg_attribute.attnum = any(pg_index.indkey)
+                    AND indisprimary
+                ";
+        //error_log($sql);
+        //print("toto".$dsn);
+        $conn = pg_pconnect($dsn);
+        $result = pg_query($conn, $sql);
+        $row = pg_fetch_assoc($result);
+
+        return $row['unique_id'];
+
+    }
+
+    protected function getGeomFld($schema, $layerName, $dsn) {
+        $sql = " SELECT
+                    f_geometry_column AS geom
+                 FROM 
+                    geometry_columns 
+                 WHERE
+                    f_table_name = '$layerName' 
+                    AND f_table_schema = '$schema'
+                ";
+        //error_log($sql);
+        $conn = pg_pconnect($dsn);
+        $result = pg_query($conn, $sql);
+        $row = pg_fetch_assoc($result);
+        return $row['geom'];
+    }
+
+    /**
+     * Return layer definition string
+     * reads either *.msl file with same base name as data file
+     *   or default polygon/line/point.lyr file from plugin dir
+     * @return string $layerString
+     */
+    protected function getLayerDefinition($connParams, $layerSpatialType) {
+        $ogrDBConn = false;
+        if ($connParams['type'] == "generic") {
+            $ogrConnectionStr = $this -> data_path_prefix . $connParams['layer'];
+            //error_log($ogrConnectionStr);
+            // $layerDefFile = dirname(__FILE__) . "/" . $connParams['layer'] . ".msl";   ## swap comment if layer definition file in plugin dir
+            $layerDefFile = $ogrConnectionStr . ".msl";
+        } else {
+            $ogrConnectionStr = "PG: " . $connParams['connection'];
+            $layerDefFile = dirname(__FILE__) . "/layerdefinition/" . $connParams['layer'] . ".msl";
+        }
+
+        if ($layerSpatialType == "vector") {
+            if (!file_exists($ogrConnectionStr) && $connParams['type'] == "generic") {
+                error_log($ogrConnectionStr . " does not exist.");
+                return null;
+            }
+
+            // Register all drivers
+            OGRRegisterAll();
+
+            // Open data source
+            $hSFDriver = NULL;
+            $hDatasource = OGROpen($ogrConnectionStr, 0, $hSFDriver);
+
+            if (!$hDatasource) {
+                error_log("Unable to open %s\n" . $ogrConnectionStr);
+                return 0;
+            }
+
+            if ($connParams['type'] == "generic") {
+                $hLayer = OGR_DS_GetLayer($hDatasource, 0);
+            } else {
+                $hLayer = OGR_DS_GetLayerByName($hDatasource, $connParams['schema'] . "." . $connParams['layer']);
+            }
+
+            /* Dump info about this layer */
+            $hLayerDefn = OGR_L_GetLayerDefn($hLayer);
+            $hFeature = OGR_L_GetNextFeature($hLayer);
+            if (OGR_F_GetGeometryRef($hFeature) != NULL) {
+                $hGeom = OGR_F_GetGeometryRef($hFeature);
+                //$geomType = OGR_G_GetGeometryType($hGeom);
+                $geomNameOGR = OGR_G_GetGeometryName($hGeom);
+            }
+            /* Close data source */
+            OGR_DS_Destroy($hDatasource);
+
+            /*$geomList[1] = "point";
+             $geomList[2] = "line";
+             $geomList[3] = "polygon";
+             $geomList[6] = "polygon";*/
+
+            $geomList["POINT"] = "point";
+            $geomList["MULTIPOINT"] = "point";
+            $geomList["LINESTRING"] = "line";
+            $geomList["MULTILINESTRING"] = "line";
+            $geomList["POLYGON"] = "polygon";
+            $geomList["MULTIPOLYGON"] = "polygon";
+
+            //            $geomName = $geomList[$geomType];
+            $geomName = $geomList[$geomNameOGR];
+        } else {
+            $geomName = "raster";
+        }
+
+        if (is_file($layerDefFile)) {
+            //if (is_file($layerDefFile = $layerFilename . ".msl")) {
+            $layerString = file_get_contents($layerDefFile);
+        } else {
+            $layerPath = dirname(__FILE__) . "/layerdefinition/$geomName.lyr";
+            $layerString = file_get_contents($layerPath);
+        }
+        //error_log("layerDefFile: $layerDefFile");
+
+        return $layerString;
+    }
+
+    /**
+     * Return map extent in projected coordinates
+     * @return array $mePrj
+     */
+    protected function getMapExtent($dataSpecs) {
+        $extBuffer = isset($_SESSION['pluginsConfig']['dynlayercat']['mapExtentBuffer']) ? $_SESSION['pluginsConfig']['dynlayercat']['mapExtentBuffer'] : 0;
+        $layerProjStr = "init=" . $dataSpecs['epsg'];
+        $layerPrj = ms_newprojectionobj($layerProjStr);
+        $latlonPrj = ms_newprojectionobj("init=epsg:4326");
+        //$le = $dataSpecs['bbox'];
+        $le = array();
+        foreach ($dataSpecs['bbox'] as $k => $v) {
+            $buffer = $v < 0 ? $extBuffer * -1 : $extBuffer;
+            $le[$k] = $v + $buffer;
+        }
+
+        $mapExt = ms_newRectObj();
+        $mapExt -> setExtent($le['westLon'], $le['southLat'], $le['eastLon'], $le['northLat']);
+        $mapExt -> project($latlonPrj, $layerPrj);
+        //error_log($mapExtLatLon->minx . ", " . $mapExtLatLon->miny . ", " . $mapExtLatLon->maxx . ", " . $mapExtLatLon->maxy  );
+
+        $mePrj = array("minx" => $mapExt -> minx, "miny" => $mapExt -> miny, "maxx" => $mapExt -> maxx, "maxy" => $mapExt -> maxy);
+        return $mePrj;
+    }
+
+    function printDebug($dbgstr0, $headerstr = false) {
+        ob_start();
+        print_r($dbgstr0);
+        $dbgstr = ob_get_contents();
+        ob_end_clean();
+
+        $errlog_dir = str_replace('\\', '/', dirname(ini_get("error_log")));
+        if (file_exists($errlog_dir)) {
+            $outMapFN = $errlog_dir . "/pm_debug.log";
+
+            date_default_timezone_set($_SESSION['defaultTimeZone']);
+            // Required for PHP 5.3
+            $header = "\n[" . date("d-M-Y H:i:s") . "] P.MAPPER debug info \n";
+            if ($headerstr)
+                $header .= "$headerstr\n";
+            $fpOut = fopen($outMapFN, "a+");
+            if (!$fpOut) {
+                error_log("Cannot create debug log file $fpOut. Check permissions.");
+                return false;
+            }
+            fwrite($fpOut, "$header $dbgstr");
+            fclose($fpOut);
+        } else {
+            error_log("Incorrect setting for 'error_log' in 'php.ini'. Set to a valid file name.");
+        }
+    }
+
+}
+?>

Property changes on: pmapper/plugins/dynlayercat/dynlayercat.php
___________________________________________________________________
Added: svn:executable
   + *

Index: pmapper/plugins/dynlayercat/dynlayercatinit.php
===================================================================
--- pmapper/plugins/dynlayercat/dynlayercatinit.php	(revision 0)
+++ pmapper/plugins/dynlayercat/dynlayercatinit.php	(revision 0)
@@ -0,0 +1,12 @@
+<?php
+$old_path = getcwd();
+$fileDirname = str_replace('\\', '/', realpath(dirname(__FILE__)));
+chdir($fileDirname);
+
+require_once ("dynlayercat.php");
+
+$dyn = new DynLayerCat($map);
+$dyn -> initDynLayers(true);
+
+chdir($old_path);
+?>
\ No newline at end of file

Property changes on: pmapper/plugins/dynlayercat/dynlayercatinit.php
___________________________________________________________________
Added: svn:executable
   + *

Index: pmapper/plugins/dynlayercat/dynlayercat_config.php
===================================================================
--- pmapper/plugins/dynlayercat/dynlayercat_config.php	(revision 0)
+++ pmapper/plugins/dynlayercat/dynlayercat_config.php	(revision 0)
@@ -0,0 +1,8 @@
+<?php
+// TODO : This should move to plugin conf ?
+$connections = array();
+$connections['pg:gis_sdi'] = array(
+    "type" => "POSTGIS", 
+    "connection" => "dbname=gis_sdi host=iguana.eea.europa.eu user='gis_sdi_user' password='VLIsuQt#EA3'"
+);
+?>
\ No newline at end of file

Property changes on: pmapper/plugins/dynlayercat/dynlayercat_config.php
___________________________________________________________________
Added: svn:executable
   + *

Index: pmapper/plugins/dynlayercat/config.inc
===================================================================
--- pmapper/plugins/dynlayercat/config.inc	(revision 0)
+++ pmapper/plugins/dynlayercat/config.inc	(revision 0)
@@ -0,0 +1,7 @@
+<?php
+
+// PHP files loaded into map.phtml:
+// enable PHP code only if plugin is activated
+$phpFiles = array('dynlayercatinit.php');
+
+?>
\ No newline at end of file

Property changes on: pmapper/plugins/dynlayercat/config.inc
___________________________________________________________________
Added: svn:executable
   + *

Index: pmapper/index.phtml
===================================================================
--- pmapper/index.phtml	(revision 1244)
+++ pmapper/index.phtml	(working copy)
@@ -1,15 +1,235 @@
 <?php
-if (isset($_REQUEST['config'])) {
-    $config = $_REQUEST['config'];
-    $startFile = "map_" . $config . ".phtml";
-    if (file_exists($startFile)) {
-        $startFile = "$startFile?config=$config";
-    } else {
-        $startFile = "map.phtml?config=$config";
-    }
-} else {
-    $startFile = "map_default.phtml";
+
+/******************************************************************************
+ *
+ * Purpose: p.mapper application main entry file 
+ * Author:  Armin Burger
+ *
+ ******************************************************************************
+ *
+ * Copyright (c) 2003-2011 Armin Burger
+ *
+ * This file is part of p.mapper.
+ *
+ * p.mapper is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version. See the COPYING file.
+ *
+ * p.mapper is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with p.mapper; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ ******************************************************************************/
+// prevent XSS
+if (isset($_REQUEST['PM_INCPHP'])) exit();
+
+// Set separate cookie path for every p.mapper instance to avoid conflicting sessions when session.use_cookies is true
+if (ini_get("session.use_cookies")) {
+    ini_set("session.cookie_path", dirname($_SERVER['SCRIPT_NAME']));
 }
 
-header("Location: $startFile");
-?>
\ No newline at end of file
+require_once("incphp/pmsession.php");
+
+// Define config to be used
+$config = "eea";
+
+// INCLUDE PHP FILES
+require_once("config/__startup_config.php");
+require_once("incphp/group.php");
+$_SESSION['mapObjModifierFirstInclude'] = true;
+require_once("incphp/globals.php");
+$_SESSION['mapObjModifierFirstInclude'] = false;
+require_once("incphp/common.php");
+require_once("incphp/init/initmap.php");
+require_once("incphp/legend.php");
+include_once("incphp/init/init.php");
+include_once("incphp/uielement.php");
+
+header("Content-type: text/html; charset=$defCharset");
+
+?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"> 
+<html xmlns="http://www.w3.org/1999/xhtml" lang="<?php echo $gLanguage ?>" xml:lang="<?php echo $gLanguage ?>">
+
+<head>
+ <meta http-equiv="Content-Script-Type" content="text/javascript" />
+ <meta name="description" content="p.mapper - MapServer PHP/MapScript Framework" />
+ <meta name="author" content="Armin Burger" />
+ <meta name="keywords" content="p.mapper, pmapper, MapServer, PHP, MapScript" />
+
+ <title><?php echo $_SESSION['pmTitle'] ?></title>
+ 
+  <?php 
+    
+    // Load all JS files from 'javascript' and 'config' directory
+    echo $jsReference; 
+    
+    echo $jsConfigReference;
+
+    // Reference all global JS variables
+    include("incphp/js/js_init.php"); 
+  ?>
+ 
+ <link rel="shortcut icon" href="images/favicon.ico" type="image/x-icon" />
+ <link rel="stylesheet" href="templates/default.css" type="text/css" />
+ <link rel="stylesheet" href="templates/layout.css" type="text/css" />
+ <link rel="stylesheet" href="templates/jquery.treeview.css" type="text/css" />
+ <link rel="stylesheet" href="templates/toc.css" type="text/css" />
+ <link rel="stylesheet" href="templates/query.css" type="text/css" />
+ <link rel="stylesheet" href="templates/dialog.css" type="text/css" />
+ <link rel="stylesheet" href="templates/jquery.layout.css" type="text/css" />
+ <!--[if lt IE 7]> 
+ <link rel="stylesheet" href="templates/ie6.css" type="text/css" />
+ <![endif]--> 
+ 
+ <style type="text/css">
+ <!--
+   .ui-layout-east {border: 1px solid #999999; background-color:#e9e9e9;}
+   .ui-layout-center {border: 1px solid #999999;}
+   .ui-layout-root {border: 1px solid #000000;}
+ }
+ -->
+ </style>
+
+ 
+ <?php 
+    // Load all CSS files from config directory
+    echo $cssReference; 
+ ?>
+ 
+ 	<script type="text/javascript">
+
+    $.extend(PM.Layout,
+    {
+        /**
+         * Resize UI containers after root element resize
+         */
+        resizeContainers: function() {
+            //var rootElem = $(window);
+            var rootElem = $('#uiLayoutRoot'); 
+            var rootH = rootElem.height();
+            var rootW = rootElem.width();
+            var northH = $('#uiLayoutNorth').outerHeight({margin:true, border:true});
+            var southH = $('#uiLayoutSouth').outerHeight({margin:true});
+            var mH = rootH - northH - southH;
+            
+            $('#uiLayoutCenter').css({position:'absolute'})
+                                .height(mH)
+                                .width(rootW - $('#uiLayoutWest').outerWidth({margin:true}) - $('#uiLayoutEast').outerWidth({margin:true}) - 3)
+                                .top(northH)
+                                .left($('#uiLayoutWest').outerWidth({margin:true}));
+            $('#uiLayoutEast').height(mH).top(northH);
+            $('#toc, #toclegend').height(mH - $('#refmap').height() - $('#toc').itop() - 8);
+                                
+            PM.Layout.resizeMapZone();
+        }
+        
+    });
+    
+    
+	/**
+     * Settings for jquery.ui.layout
+     * ======= ADAPT TO PAGE LAYOUT =======
+     */
+	$(document).ready(function () {
+        var mrgH = 6;
+        var mrgV = 6;
+        //$('#uiLayoutRoot').css({position:'absolute',  top:0, bottom:0, left:0, right:0});
+        $('#uiLayoutRoot').css({position:'absolute',  width: '100%', height: '100%'});
+        $('#uiLayoutWest').css({position:'absolute', width:0, 'margin-right':mrgH});
+        $('#uiLayoutEast').css({position:'absolute', right:0, width:240, height:'100%', 'margin-left':mrgH, 'margin-right':mrgH, 'z-index':99});
+        $('#uiLayoutNorth').css({position:'absolute', top:0, height:40, width:'100%', 'margin-bottom':mrgV, 'z-index':2});
+        $('#uiLayoutSouth').css({position:'absolute', bottom:0, height:35, width:'100%', 'margin-top':mrgV+2});
+        
+        /** Some components to be added to UI */
+        $('#uiLayoutCenter').pmToolBar(PM.buttonsDefault);  // ToolBar, REQUIRED
+        $('#uiLayoutNorth').pmToolLinks(PM.linksDefault);   // Tool links
+        $('#uiLayoutCenter').appendElement('div').addClass('map-top-bar');  // Top bar over map
+        
+        PM.Layout.resizeContainers();
+        $(window).resize(function(){
+            PM.Layout.resizeContainers();
+        });
+ 	});
+
+    
+	</script>
+
+</head>
+
+<body>
+
+<!-- ======================= ADAPT START ======================== -->
+<div class="ui-layout-root" id="uiLayoutRoot" >
+
+    <div class="ui-layout-north" id="uiLayoutNorth">
+        <?php echo UiElement::pmHeader() ?>
+    </div>
+
+    <div class="ui-layout-west" id="uiLayoutWest">
+        <div id="legend"></div>
+    </div>
+
+    <div class="ui-layout-south" id="uiLayoutSouth">
+        <?php //echo UiElement::displayCoordinates() ?>
+        <?php echo UiElement::pmFooter() ?>
+    </div>
+
+    <div class="ui-layout-east" id="uiLayoutEast">
+        <!-- Legend/TOC -->
+        <?php echo UiElement::tocContainer($_SESSION['userAgent']) ?>
+            
+        <!-- Reference Map -->
+        <?php echo UiElement::refMap($refH, $refW, $refImg, $refH, $refW) ?>
+    </div>
+
+    <div class="ui-layout-center" id="uiLayoutCenter">
+        <!-- Map Zone -->
+        <?php echo UiElement::mapZone() ?>
+        
+        <!-- Slider -->
+        <?php echo UiElement::zoomSlider() ?>
+        
+        <!-- Search Container -->
+        <?php echo UiElement::searchContainer("inline") ?>
+           
+        <!-- Scale -->
+        <?php echo UiElement::scaleForm() ?>
+        
+    </div>
+
+<!-- ======================= ADAPT END ======================== -->
+</div>
+
+<div style="visibility:hidden"><img id="pmMapRefreshImg" src="images/pixel.gif" alt="" /></div>
+<div style="visibility:hidden"><img src="images/pixel.gif" alt="" /></div>
+
+<!-- MANDATORY form element for update events; DO NOT REMOVE! -->
+<?php echo UiElement::addUpdateEventForm()?>
+
+
+<script type="text/javascript">
+    // use jQuery for intitialization 
+    $(document).ready(function() {
+        PM.Init.main();
+        <?php echo $jsInitFunctions ?>
+    });
+    
+    // Create drawing object for measure function
+    jg = new jsGraphics('measureLayer');
+    jg.setColor(PM.measureObjects.line.color); 
+    jg.setStroke(PM.measureObjects.line.width);
+    
+    //#fede
+    jg_tmp = new jsGraphics('measureLayerTmp');
+    
+</script>
+
+</body>
+</html>
\ No newline at end of file
Index: pmapper/map_default.phtml
===================================================================
--- pmapper/map_default.phtml	(revision 1244)
+++ pmapper/map_default.phtml	(working copy)
@@ -36,6 +36,9 @@
 
 require_once("incphp/pmsession.php");
 
+// Define config to be used
+$config = "eea";
+
 // INCLUDE PHP FILES
 require_once("config/__startup_config.php");
 require_once("incphp/group.php");
@@ -137,7 +140,8 @@
 	$(document).ready(function () {
         var mrgH = 6;
         var mrgV = 6;
-        $('#uiLayoutRoot').css({position:'absolute',  top:10, bottom:10, left:10, right:10});
+        //$('#uiLayoutRoot').css({position:'absolute',  top:0, bottom:0, left:0, right:0});
+        $('#uiLayoutRoot').css({position:'absolute',  width: '100%', height: '100%'});
         $('#uiLayoutWest').css({position:'absolute', width:0, 'margin-right':mrgH});
         $('#uiLayoutEast').css({position:'absolute', right:0, width:240, height:'100%', 'margin-left':mrgH, 'margin-right':mrgH, 'z-index':99});
         $('#uiLayoutNorth').css({position:'absolute', top:0, height:40, width:'100%', 'margin-bottom':mrgV});
@@ -173,7 +177,7 @@
     </div>
 
     <div class="ui-layout-south" id="uiLayoutSouth">
-        <?php echo UiElement::displayCoordinates() ?>
+        <?php //echo UiElement::displayCoordinates() ?>
         <?php echo UiElement::pmFooter() ?>
     </div>
 
Index: pmapper/javascript/src/pm.query.js
===================================================================
--- pmapper/javascript/src/pm.query.js	(revision 1244)
+++ pmapper/javascript/src/pm.query.js	(working copy)
@@ -55,12 +55,14 @@
                    {"layerHeader":"<div class=\"pm-info-layerheader\">_p(Layer): ${description}</div><table class=\"sortable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\">",
                     "theaderTop": "<tr>",
                     "theader": "<th>@</th>",
+                    "theaderWithDef": "<th># (@)</th>",
                     "theaderBottom": "</tr>",
                     "tvaluesTop": "<tr>",
                     "tvalues":
                         {"shplink": "<td class=\"zoomlink\"><a href=\"javascript:PM.Map.zoom2extent('$[0]','$[1]','$[2]','$[3]')\"><img src=\"images/zoomto.gif\" alt=\"zoomto\"></a></td>",
                          "hyperlink": "<td><a href=\"javascript:PM.Custom.openHyperlink('$[0]','$[1]','$[2]')\">$[3]</a></td>",
-                         "#default": "<td>$</td>"
+                         "#default": "<td>$</td>",
+                         "#defaultWithDef": "<td title='Â£'>$ : @</td>"
                         },
                     "tvaluesBottom": "</tr>",
                     "layerFooter":"</table>"
@@ -257,10 +259,15 @@
                     }
                 });
             });
-            
+            var dh = this.defheader;
             $.each(rHeader, function(i) {
-                if (!(skipShpLink && this == '@') && this != "#" && layTpl.theader) { 
-                    h.append(layTpl.theader.replace(/\@/, this));
+                if (!(skipShpLink && this == '@') && this != "#" && layTpl.theader) {
+                    if (dh && dh[this].desc) {
+                        h.append(layTpl.theaderWithDef.replace(/\@/, this).replace(/#/, dh[this].desc));
+                        
+                    } else {
+                        h.append(layTpl.theader.replace(/\@/, this));
+                    }
                 } 
             });
             h.append(layTpl.theaderBottom);
@@ -289,10 +296,20 @@
                     } else if (this.hyperlink) {
                        h.append(PM.Query.parseLink(layTpl.tvalues.hyperlink, this.hyperlink).replace(/@/, rHeader[i]));
                     } else {
-                        if (!(noShpLink && i == 0)) 
-                            h.append(layTpl.tvalues['#default'].replace(/\$/, this)
-                                                               .replace(/@/, rHeader[i])
-                            );
+                        if (!(noShpLink && i == 0)) {
+                            // Display values with label and definition
+                            if (dh && dh[rHeader[i]].values[this]) {
+                                h.append(layTpl.tvalues['#defaultWithDef']
+                                                    .replace(/\$/, this)
+                                                    .replace(/@/, dh[rHeader[i]].values[this].label)
+                                                    .replace(/Â£/, dh[rHeader[i]].values[this].def)
+                                );
+                            } else {
+                                h.append(layTpl.tvalues['#default'].replace(/\$/, this)
+                                                                   .replace(/@/, rHeader[i])
+                                );
+                            }
+                        }
                     }
                     
                 });
